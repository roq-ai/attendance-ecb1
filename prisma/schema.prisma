generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model attendance {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student_id String   @db.Uuid
  date       DateTime @db.Date
  status     String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  student    student  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model evaluation {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student_id            String   @db.Uuid
  evaluation_period     String   @db.VarChar(255)
  attendance_percentage Int
  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @default(now()) @db.Timestamp(6)
  student               student  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model leave {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student_id String   @db.Uuid
  start_date DateTime @db.Date
  end_date   DateTime @db.Date
  reason     String?  @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  student    student  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model school {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student     student[]
}

model student {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String       @db.VarChar(255)
  birthdate  DateTime     @db.Date
  division   String       @db.VarChar(255)
  group_name String       @db.VarChar(255)
  school_id  String       @db.Uuid
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  attendance attendance[]
  evaluation evaluation[]
  leave      leave[]
  school     school       @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String   @unique @db.VarChar(255)
  firstName   String?  @db.VarChar(255)
  lastName    String?  @db.VarChar(255)
  roq_user_id String   @db.VarChar(255)
  tenant_id   String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  school      school[]
}
